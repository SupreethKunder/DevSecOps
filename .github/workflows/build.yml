name: Trigger CI pipeline

on:
  workflow_call:
    inputs:
      repo_name:
        required: true
        type: string
      branch_name:
        required: true
        type: string
      commit_msg:
        required: true
        type: string

    outputs:
      A:
        description: "Name of the client"
        value: ${{ jobs.docker.outputs.output1 }}
      B:
        description: "Name of the CNAME"
        value: ${{ jobs.docker.outputs.output2 }}
      C:
        description: "Version to be deployed"
        value: ${{ jobs.docker.outputs.output3 }}
      D:
        description: "Deployment layer name"
        value: ${{ jobs.docker.outputs.output4 }}

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  REGISTRY: docker.io
  PAT_USERNAME: ${{ secrets.USERNAME }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  REPO_URL: ${{ inputs.repo_name }}
  BRANCH_NAME: ${{ inputs.branch_name }}
  COMMIT_MSG: ${{ inputs.commit_msg }}
  
jobs:
  docker:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 8
      matrix:
        python-version: [3.12.0]

    outputs:
      output1: ${{ steps.step4.outputs.A }}
      output2: ${{ steps.step4.outputs.B }}
      output3: ${{ steps.step4.outputs.C }}
      output4: ${{ steps.step4.outputs.D }}

    steps:
      - name: Setup python ${{ matrix.python-version }}
        id: step1
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - uses: actions/checkout@v2
        id: step2
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch_name }}
      
      - name: Setup buildx
        id: step3
        uses: docker/setup-buildx-action@v2  
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Semantic Versioning
        id: step4
        run: |
          REPO_NAME=$(echo "$REPO_URL" | cut -d'/' -f2)
          WORDS=$(echo "$REPO_NAME" | tr '-' ' ')
          CLIENT_NAME=$(echo "$WORDS" | awk '{print $1}')
          CNAME=$(echo "$WORDS" | awk '{print $2}')
          DEPLOYMENT_TYPE=$(echo "$WORDS" | awk '{$1=""; $2=""; print}' | awk '{$1=$1};1' | tr ' ' '-')
          ACCEPTED_RELEASE_TYPES="major minor patch"
          COMMIT_MSG=$(echo "$COMMIT_MSG" | tr '[:upper:]' '[:lower:]' | tr -d -c '[:alnum:][:space:]')

          for type in $ACCEPTED_RELEASE_TYPES; do
              if [[ "$COMMIT_MSG" == *"$type"* ]]; then
                  RELEASE_TYPE="$type"
                  break
              fi
          done

          if [ -z "$RELEASE_TYPE" ]; then
              RELEASE_TYPE="patch"
          fi
          pip install -U pip poetry
          poetry version $RELEASE_TYPE
          TAG=$(poetry version -s)
          
          if [[ $BRANCH_NAME == 'prod' ]]; then
            VERSION="$TAG"
          else
            VERSION="$TAG-$BRANCH_NAME"
          fi

          echo "A=$CLIENT_NAME" >> $GITHUB_OUTPUT
          echo "B=$CNAME" >> $GITHUB_OUTPUT
          echo "C=$VERSION" >> $GITHUB_OUTPUT
          echo "D=$DEPLOYMENT_TYPE" >> $GITHUB_OUTPUT
          echo "E=$TAG" >> $GITHUB_OUTPUT

      - name: Test,Build & Dockerize
        id: step5
        env:
          CLIENT_NAME: ${{ steps.step4.outputs.A }}
          CNAME: ${{ steps.step4.outputs.B }}
          VERSION: ${{ steps.step4.outputs.C }}
          TAG: ${{ steps.step4.outputs.E }}
          DEPLOYMENT_TYPE: ${{ steps.step4.outputs.D }}
        run: |
          make
          artifacts=$(curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $PAT_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$REPO_URL/releases \
              -d '{"tag_name": "'$VERSION'","target_commitish": "'$BRANCH_NAME'","name": "v'$VERSION'","body": "Release of version '$VERSION'","draft": false,"prerelease":false,"generate_release_notes":true}')
          RELEASE_ID=$(echo "$artifacts" | jq -r '.id')
          echo "$RELEASE_ID"
          curl -L \
              -X POST \
              -H "Accept: application/vnd.github.manifold-preview" \
              -H "Content-Type: application/tar+gzip" \
              -H "Authorization: Bearer $PAT_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --data-binary @"dist/${CNAME}_$(echo $DEPLOYMENT_TYPE | tr '-' '_')-$TAG.tar.gz" \
              https://uploads.github.com/repos/$REPO_URL/releases/$RELEASE_ID/assets?name=$CNAME-$DEPLOYMENT_TYPE-$TAG.tar.gz
          curl -L \
              -X POST \
              -H "Accept: application/vnd.github.manifold-preview" \
              -H "Content-Type: application/zip" \
              -H "Authorization: Bearer $PAT_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              --data-binary @"dist/${CNAME}_$(echo $DEPLOYMENT_TYPE | tr '-' '_')-$TAG-py3-none-any.whl" \
              https://uploads.github.com/repos/$REPO_URL/releases/$RELEASE_ID/assets?name=$CNAME-$DEPLOYMENT_TYPE-$TAG-py3-none-any.whl    
      
      - name: Docker Vulnerability Check
        id: step6
        continue-on-error: true
        uses: docker/scout-action@v0.18.1
        with:
          command: quickview,cves
          image: ${{ env.DOCKER_USERNAME }}/${{ steps.step4.outputs.A }}-${{ steps.step4.outputs.B }}:${{ steps.step4.outputs.C }}-${{ steps.step4.outputs.D }}
          ignore-unchanged: true
          write-comment: true
          github-token: ${{ env.PAT_TOKEN }}
